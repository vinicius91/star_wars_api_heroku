"""
Django settings for star_wars project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import sys
import os
import mongoengine
from dotenv import load_dotenv
import django_heroku

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '+4p(@=q!9wn42hjyv(x!y*u_7nd=rtce61ik9!z10@thi(&9+@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'crispy_forms',
    'django_filters',
    'star_wars_api'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'star_wars.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR,os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'star_wars.wsgi.application'


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# We define 2 Mongo databases - default and test
MONGODB_DATABASES = {
    "default": {
        "database": os.getenv("DATABASE_NAME"),
        "host": os.getenv("DATABASE_HOST"),
        'username': os.getenv("DATABASE_USERNAME"),
        'password': os.getenv("DATABASE_PASSWORD"),
        "port": 47030,
        "tz_aware": True,  # if you use timezones in django (USE_TZ = True)
    },

    "test": {
        "database": os.getenv("TEST_DATABASE_NAME"),
        "host": os.getenv("TEST_DATABASE_HOST"),
        'username': os.getenv("TEST_DATABASE_USERNAME"),
        'password': os.getenv("TEST_DATABASE_PASSWORD"),
        "port": os.getenv("TEST_DATABASE_PORT"),
        "tz_aware": True,  # if you use timezones in django (USE_TZ = True)
    }
}


def is_test():
    """
    Checks, if we're running the server for real or in unit-test.
    We might need a better implementation of this function.
    """
    if 'test' in sys.argv or 'testserver' in sys.argv:
        print("Using a test mongo database")
        return True
    else:
        print("Using a default mongo database")
        return False

if is_test():
    db = 'test'
else:
    db = 'default'



mongoengine.connect(
    db=MONGODB_DATABASES[db]['database'],
    host=MONGODB_DATABASES[db]['host'],
    username=MONGODB_DATABASES[db]['username'],
    password=MONGODB_DATABASES[db]['password'],
    port=MONGODB_DATABASES[db]['port'],
)

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS':
    'star_wars_api.configurations.pagination.LimitOffsetPaginationWithMaxLimit',
    'PAGE_SIZE': 5,
    'DEFAULT_THROTTLE_CLASSES': (
            'rest_framework.throttling.AnonRateThrottle',
            'rest_framework.throttling.UserRateThrottle',
        ),
        'DEFAULT_THROTTLE_RATES': {
            'anon': '50/hour',
            'user': '50/hour',
        }
}

AUTH_USER_MODEL = 'star_wars_api.UserProfile'


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

django_heroku.settings(locals())